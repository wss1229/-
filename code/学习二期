require.context（检索目录，是否检索子文件夹，文件名匹配的正则表达式）；是一个webpack的api,主要用来实现模块的自动化导入。
这个函数执行后返回一个函数，返回的这个函数有三个属性：id,keys,resolve。resolve是一个函数，它接收一个参数requst
keys,也是一个函数，返回的是匹配成功模块的名字组成的数组。id是字符串，是执行环境的id
token存在cookie中的好处：因为cokie受同源策略的影响所以cookie中存token，只要设置了过期时间即使浏览器关闭也是有效的。

设计模式中的mixin模式：
 通常我们利用原型能实现从一个类到另一个类的继承，这种继承具有父子或者是主从属性。而使用mixins可以让这个继承实现扁平化。
 也就是说mixin是一个包含了可被其他类使用而无需继承的方法的类
 
 vue中的mixin混入
 主要解决：重复性功能。
 使用方法：mixins的语法和一般vue组件一样，该有的methods,computed,mounted都会有。作用就是代替组件中重复的功能。使用方法就是在需要的组件中注册（ mixins: [myMixin]）
 
 createPersistedState:实现数据存储，通常配合vuex使用。因为vuex有一个缺点就是在页面刷新之后数据会消失。
 本质还是web存储数据的那几种方式，默认的存储键名是"vuex",
 
Peomise知识补充
promise本质就是一个延迟回调函数，能够把异步操作最终的成功返回值或者失败原因和相应的处理程序关联起来；这个异步操作会返回一个promise。
一个promise必然会处于三种状态之一：
1.pending：初始状态，没有被兑现，也没有被拒绝
2.fulfilled：操作完成
3.rejected：操作失败
then操作在什么时候会发生：不管是promise处于fulfilled还是rejected 状态下，then方法里面的相关处理程序都会被调用。
const PENDING = "pending";
const FULFILLED = "fulfilled";
const REJECTED = "rejected";

function MyPromise(executor) {
    let self = this; // 缓存当前promise实例
    self.value = null;
    self.error = null; 
    self.status = PENDING;
    self.onFulfilledCallback = []; //成功的回调函数
    self.onRejectedCallback = []; //失败的回调函数

    const resolve = (value) => {
        if(self.status !== PENDING) return;
        setTimeout(() => {
        self.status = FULFILLED;
        self.value = value;
        self.onFulfilledCallback.forEach((callback)=>callback(self.value));//resolve时执行成功回调
        });
    };

    const reject = (error) => {
        if(self.status !== PENDING) return;
        setTimeout(() => {
        self.status = REJECTED;
        self.error = error;
        // self.onRejected(self.error);//resolve时执行成功回调
        self.onRejectedCallback.forEach((callback)=>callback(self.value));
        });
    };
    executor(resolve, reject);
}
MyPromise.prototype.then = function(onFulfilled, onRejected) {
    if (this.status === PENDING) {
        this.onFulfilledCallback.push(onFulfilled);
        this.onRejectedCallback.push(onRejected);
    } else if (this.status === FULFILLED) {
        //如果状态是fulfilled，直接执行成功回调，并将成功值传入
        onFulfilled(this.value)
    } else {
        //如果状态是rejected，直接执行失败回调，并将失败原因传入
        onRejected(this.error)
    }
    return this;
}

vue的自定义指令：
vue.directives()

算法：有效的括号（结合栈）
const isValid=(s)=>{
    if(!s){
        return true
    }
    //定义一对正确的括号对象
    const leftToRight={
        '(':')',
        '[':']',
        '{':'}'
    }
    const stack=[];
    //循环传入的字符串
    for(let i=0, len=s.length; i<len; i++){
        //分别把每个值赋值给ch
        const ch=s[i];
        //判断传入的参数内，有没有对应关系，如果有就加入stack数组
        if(leftToRight[ch]){
            stack.push(ch);
        }else{
            //如果没有表示需要找寻括号的另一半
            const flag=leftToRight[stack.pop()];
            if(!stack.length||flag!=ch){
                return false;
            }
        }
    }
    return !stack.length
}
isValid('{[(]}}');

可迭代对象：简单来说可迭代对象就是可以被for...of 循环的对象。比如数组、类数组、set结构、map结构
迭代对象自带一个Symbol.iterator方法，当for....of 循环启动的时候会调用这个方法，这个方法会返回一个迭代器（Iterator）
这个Iterator迭代器有一个next（）方法，当for....of循环希望取得下一个值时，就会调用next（）这个方法，
next（)方法返回的结果的格式{done:Boolean,value:any}。当done为true时，表示循环结束。
判断一个对象是否是可迭代对象；isintance()
let range={
    from:1,
    to:5
}
//我们希望for of能执行1，2，3，4，5
//for(let num of range){}
//自定义迭代器方法，需要注意的是：[Symbol.iterator]()是一个函数方法，其中包含了next方法
//range本身通过调用Symbol.iterator方法生成range迭代器对象，这个迭代器对象中包含next方法
range[Symbol.iterator]=function(){
    return {
        current:this.from,
        last:this.to,
        next(){
            if(this.current<=this.last){
                return {done:false,value:this.current++}
            }else{
                return {done:true}
            }
        }
    }
    
}

生成器：Generator写法上是一个带 * 的函数，通过关键字yield暂停执行和恢复执行。
//生成器Generator
function* gen(){
    console.log('enter');
    let a=yield 1;
    let b=yield (function(){return 2})();
    return 3;
}
var g=gen();
//调用next后就往下执行，知道遇到yield停止，所以这里执行完之后就会打印enter,1
console.log(g.next());
console.log(g.next());

call/bind/apply
这三个都是为了改变函数运行时的上下文


//手写防抖
//防抖应用场景：适合输入框请求后台。思路：在规定时间后触发，如果在规定使劲按内出发就要重新计时，总是最后一次操作被触发
//节流应用场景：适合无限列表，监听用户scroll事件。在规定时间内只触发一次
function debounce(fn,delay){
    let timer=null;
    return function(args){
        let context=this;
        if(timer){
            clearTimeout(timer);
        }
        timer=setTimeout(function(){
            fn.call(context,args);
        },delay);
    }
}
//手写节流
var throttle = function(func, delay) {
    var timer = null;
    return function() {
        var context = this;
        var args = arguments;
        if (!timer) {
            timer = setTimeout(function() {
                func.apply(context, args);
                timer = null;
            }, delay);
        }
    }
}

执行上下文环境
每次js代码的运行都会生成一个执行上下文环境，这里面就可以分为：全局执行上下文，函数执行上下文。
有了上下文环境就要有执行栈来进行管理。执行栈是一个先进后出的栈。
在执行上下文创建的时候会做两件事情：创建词法环境和变量环境。
查找变量的方法：js查找变量首先会在函数执行上下文中查找，找不到就去调用上下文中查找，找不到就去全局上下文中继续查找，最后一直找不到就是undefined
掘金地址：https://juejin.cn/post/6844904145372053511#heading-1

typeof可以正确识别：Undefined,Boolean,Number,String,Symbol,Function等类型的数据，但是对于其他都会认为是obejct,
所以对于Null，Date可以使用Obejct.prototype.toString
function typeOf(obj) {
    let res = Object.prototype.toString.call(obj).split(' ')[1]
    res = res.substring(0, res.length - 1).toLowerCase()
    return res
    // return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase()
}
typeOf([])        // 'array'
typeOf({})        // 'object'
typeOf(new Date)  // 'date'


单例模式：是js设计模式中的一种，主要思路就是一个类只有一只实例，并且保证提供一个全局访问点。
ES5实现单例模式
var Singleton=function(name){
    this.name=name;
    this.instance=null;
}
Singleton.prototype.getName=function(){
    console.log(this.name);
}
Singleton.getInstance=function(name){
    if(!this.instance){
        this.instance=new Singleton(name);
    }
    return this.instance;
}
let a=Singleton.getInstance('Matt');
let b=Singleton.getInstance('Marry');


ES6实现单例模式
const single =  'single' // 这里使用symbol会好一点
class A {
    static getinstace () {
        if (this[single]) { // 由于是静态函数，这里的this指的是A，并不是 new A() 产生的对象哦。
            return this.single
        }
        return this[single] = new this() // 如果没有值就new 构造函数
    }

    constructor() {
        const sourceClass = this.constructor // 获取构造函数对象
        if (!sourceClass[single]) { // 判断对象上面是否已经有了单例
            sourceClass[single] = this // 这里的this指的是已经构造好的对象，空对象，只是constructor指向A
        }
        return sourceClass[single] // 如果已经存在则直接返回
    }
}
let test3=new A;
let test4=new A;
console.log(test3===test4);//true
let test1=A.getinstace();
let test2=A.getinstace();
console.log(test1===test2);//true


//es6中利用class实现类，包含：构造函数（constructor），实例方法，获取函数（get）,设置函数（set），静态方法
//constructor里面的this指向类对象，并且constructor中定义的方法和属性是实例独享的，constructor构造函数是存在于实例上的
//static中定义的函数是存在于类上的，static中的this指向类本身
class PersonName{
    constructor(name){
        console.log(arguments.length);
        this.name=name||null;
        this.locate=function(){
            console.log(this);
            console.log(typeOf(this));//object
        }
    }
    locate(){
        console.log(this);
        console.log(typeOf(this));//object
    }
    static locate(){
        console.log(this);
        console.log(typeOf(this));//function
    }
}
let p1=new PersonName;
p1.locate();
PersonName.locate();
PersonName.prototype.locate();

//数组去重:利用filter和indexof循环判断每一项在原数组中的位置与index是否相同
function unique(array){
    var res=array.filter((item,index,arr)=>{
        return arr.indexOf(item)==index;
    })
    return res;
}
let res1=unique([1,3,2,4,3,5,3]);

//flat数组扁平化:利用递归，递归结束条件：判断数组项是否是数组Array.isArray()
function flat(array){
    var result=[];
    for(var i=0;i<array.length;i++){
        if(Array.isArray(array[i])){
            result=result.concat(flat(array[i]));
        }else{
            result.push(array[i]);
        }
    }
    return result;
}
//浅拷贝：一些常用的浅拷贝的方法:扩展运算符，object.assign({},origin),
function shallowCopy(obj) {
    if (typeof obj !== 'object') return   
    let newObj = obj instanceof Array ? [] : {}
    for (let key in obj) {
        // 只复制继承的可枚举属性
        if (obj.hasOwnProperty(key)) {
            newObj[key] = obj[key]
        }
    }
    return newObj
}

//深拷贝
function shallowCopy(obj){
    if(typeof obj!=='object'){
        return
    }
    let newObj=obj instanceof Aarry?[]:{};
    for(let key in obj){
        //判断是自有属性还是继承属性，这里只拷贝自有属性
        if(obj.hasOwnProperty(key)){
            if(typeof obj[key]=='object'){
                newObj[key]=shallowCopy(obj[key]);
            }else{
                newObj[key]=obj[key];
            }
        }
    }
    return newObj
}

// Object.entries:生成键值对的二维数组
// Array.prototype.entries:生成迭代器，可以使用next方法获得一对键值对数组
var arr = ["a", "b", "c"];
var iterator = arr.entries();
// undefined

for (let e of iterator) {
    console.log(e);
}

// [0, "a"]
// [1, "b"]
// [2, "c"]
// 深拷贝是对对象和数组分别做处理
function deepCopy(original) {
    if (Array.isArray(original)) {
        // 处理数组
        const copy = [];
        for (const [index, value] of original.entries()) {
        copy[index] = deepCopy(value);
        }
        return copy;
    } else if (typeof original === 'object' && original !== null) {
        // 处理对象
        const copy = {};
        for (const [key, value] of Object.entries(original)) {
        //使用Object.entries返回的是自身可枚举的键值对
        copy[key] = deepCopy(value);
        }
        return copy;
    } else {
        // 基本数据类型，直接返回
        return original;
    }
}  
const obj={
    name:[1,3,5,2,4],
    info:{
        job:'职业',
        age:21
    },
    action:{
        now:{
            eventName:'go home',
            who:'marry'
        },
        old:{
            eventName:'go school',
            who:'marry'
        }
    }
}
事件总线：也就是发布订阅模式。类似vue组件中的eventbus作用于各个组件间的通信，有事件管理器，对于订阅了该事件（该状态）的组件做出相应处理。
事件总线逻辑：构建事件总线类，其中包含publish发布函数，subscribe订阅函数；发布函数和订阅函数之间有映射关系：以事件名为键名，订阅了的回调函数为键值。
由于一个事件不可能只有一个订阅，所以键值构建为数组模式。
class EventBus {
    constructor(){
        this.eventObject={};
    }
    public(eventName,args){
        const event=this.eventObject[eventName];
        if(!event) return console.warn(event+'not found');
        for(let callback of event){
            callback(...args);
        }
    }
    subscribe(eventName,callback){
        const event=this.eventObject[eventName];
        if(!event){
            event=[];
        }
        event.push(callback);
    }
}
const eventBus=new EventBus;
eventBus.subscribe('eventX',(msg,num)=>{
    console.log('模块A',msg,num);
})
eventBus.public('eventX',{msg:'这是一条发布信息'},23);

可以取消的订阅
class EventBus {
    constructor(){
        this.eventObject={};
        this.callbackId=0;
    }
    public(eventName,args){
        const event=this.eventObject[eventName];
        if(!event) return console.warn(event+'not found');
        for(let callback in event){
            event[callback](...args);
        }
    }
    subscribe(eventName,callback){
        const event=this.eventObject[eventName];
        if(!event){
            this.eventObject[eventName]={};
        }
        const id=this.callbackId++;
        this.eventObject[eventName][id]=callback;
        const unSubscribe=()=>{
            delete this.eventObject[eventName][id];
            if(Object.keys(this.eventObject[eventName]).length===0){
                delete this.eventObject[eventName];
            }
        }
        return {unSubscribe};
    }
}
const eventBus=new EventBus;
eventBus.subscribe('eventX',(msg,num)=>{
    console.log('模块A',msg,num);
})
const subscriberC=eventBus.subscribe('eventX',(msg,num)=>{
    console.log('模块C',msg,num);
});
subscriberC.unSubscribe();
eventBus.public('eventX',{msg:'这是一条发布信息'},23);


