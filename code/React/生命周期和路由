React Component的三个生命周期
     Mounting：已插入真实的DOM
     Updating:正在被重新渲染
     Unmounting：已经移出真实DOM
针对Component的生命周期状态React响应处理方法：
      Mounting：
            componentWillMount();
            componentDidMount();
      Updating:
            compoentWillReceiveProps(object nextProps);已载入原件收到新的参数时呼叫
            shouldComponentUpdate(object nextProps,object nextState);遇见判断是否重新渲染时调用，其实不会调用除非调用forceUpdate()
            compoentWillUpdate(object nextprops,object nextState);
            compoentDidUpdate(object prevProps,object prevState);
      Unmounting:
            componentWillUnmount();
   组件在初始化时触发的5个钩子函数：
       1、getDefaultProps():默认的props,也可以使用defaultProps设置组件的默认属性，一般用来设置子组件的默认值
                             写法1(class类组件)：
                                                 class PublicHeader extends Component{
                                                  static propTypes = {
                                                           record: PropTypes.any,
                                                           title: PropTypes.string.isRequired,
                                                           confirm: PropTypes.any,
                                                         }
                                                 }
                            
                              写法2(class类组件)：
                                                  class PublicHeader extends Component{
                                                  }
                                                  PublicHeader.propTypes={
                                                         record: React.PropTypes.any,
                                                         title: React.PropTypes.string.isRequired,
                                                         confirm: React.PropTypes.any,
                                                  }
                               写法3(class类组件)：与上面两种写法不同的是使用createReactClass()
                                                  var PublicHeader=createReactClass({
                                                       getDefaultProps:function(){
                                                            return {
                                                                 record:''
                                                            }
                                                       }
                                                  })
        2、getInitialState():在使用es6的class语法时没有此钩子函数，同时在constractor中定义this.state,此时可以访问this.props;
                              写法1(class类组件):
                                             class Counter React.Component{
                                                  constructor(props){
                                                       super(props);
                                                       this.state={count:props.initialCount};
                                                  }
                                             }
                                写法2(class类组件):
                                             var Counter=creatReactClass({
                                               getInitialState:function(){
                                                 return {count:this.props.initialCount};
                                               }
                                             })
          3、componentWillMount():组件初始化时条用，以后组件更新不调用，整个生命周期只调用一次
          4、render():创建虚拟dom，进行diff算法，更新dom树
          5、componentDidMount():组件渲染之后调用，网络请求一般写在此周期内，在此周期内可以获取和修改dom节点（使用this.getDOMNode())，只调用一次
     组件在更新时触发的钩子函数5个：
          6、componentWillReceiveProps(nextProps):组件初始化时不调用，接收新的props时调用。
          7、shouldComponentUpdate(nextProps,nextState):组件再次接收新的state和props，可以在此生命周期中设置前后两个props和state是否相同，如果相同则返回false阻止更新。
          这里注意react使用的浅对比，也就是对于深层次的结构react会认为它们没有更新。
               class CounterButton extends Component {
                      constructor(props){
                        super(props);
                        this.state={count:1};
                      }
                      shouldComponentUpdate(nextProps,nextState){
                        if(this.props.color!=nextProps.color){
                          return true;
                        }
                        if(this.props.count!=nextState){
                          return true;
                        }
                        return false;
                      }
                      render(){
                        return (
                          <button
                          color={this.props.color}
                          onClick={()=>this.setState(state=>({count:state.count+1}))}
                          >
                            Count:{this.state.count}
                          </button>
                        )
                      }
                    }
               class Counter extends PureComponent {
                 constructor(props){
                   super(props);
                   this.state={count:1};
                 }
                 render(){
                   return (
                     <button
                     color={this.props.color}
                     onClick={()=>this.setState(state=>({count:state.count+1}))}
                     >
                       Count:{this.state.count}
                     </button>
                   )
                 }
               }
               class WordAdd extends Component {
                 constructor(props){
                   super(props);
                   this.state={
                     words:['marker']
                   };
                   this.handleClick=this.handleClick.bind(this);
                 }
                 handleClick(){
                   // this.setState(state=>({
                   //   words:state.words.concat(['marker'])
                   // }))
                   // this.setState(state=>({
                   //   words:[...state.words,'marker']
                   // }))

                 }
                 render(){
                   return (
                     <div>
                       <button onClick={this.handleClick}></button>
                       <ListOfWords words={this.state.words} />
                     </div>
                   )
                 }
               }
          8、componentWillUpdate(nextProps,nextState):组件初始化时不调用，只有在组件将要更新时才调用
          9、render()
          10、componentDidUpdate():组件初始化时不调用，组件更新完成后调用，可以获取dom节点
          11、componentWillUnmount():组件将要卸载时调用，一些时间的监听和定时器在此时清除
 React-Router路由
          Router是React的一个组件，根据匹配的路由地址展现相应的组件。
          Route对路由地址和组件进行绑定，且Route具有嵌套功能，表示路由地址的包含关系，Route可以向绑定的组件传递的7个属性：
               children,history,location,params,route,routeParams,routes
               比较常见的有children(以路由的包涵关系为区分的组件)，location(包括地址，参数，地址切换方式，key值，hash值)
               <react-router>提供了link标签，这只是对a标签的封装，点击链接后跳转不是a标签的默认方式，点击标签后会先根据url地址的转变，Router监听地址转变
               然后根据Route的path属性匹配到相应的组件
          路由的按需加载：解决初次渲染速度慢的问题
                                   React-Router-dom4.0以前：Route的component改为getComponent,组件用require.ensure的方式获取，在webpack中配置chunkFilename
                                                            const record=(location,cb)=>{
                                                              require.ensure([],require=>{
                                                                cb(null,require('@/pages/record/record').default)
                                                              },'record')
                                                            };
                                                            const helpcenter=(location,cb)=>{
                                                              require.ensure([],require=>{
                                                                cb(null,require('@/pages/helpcenter/helpcenter').default)
                                                              },'helpcenter')
                                                            }
                                                            const production=(location,cb)=>{
                                                              require.ensure([],require=>{
                                                                cb(null,require('@/pages/production/production').default)
                                                              },'production')
                                                            }
                                                            const balance=(location,cb)=>{
                                                              require.ensure([],require=>{
                                                                cb(null,require('@/pages/balance/balance').default)
                                                              },'balance')
                                                            }
                                                            const RouteConfig=(
                                                              <Router history={history}>
                                                                <Route path='/' getComponent={home}>
                                                                  <Route path='/record' getComponent={record} />
                                                                  <Route path='/production' getComponent={production} />
                                                                  <Route path='balance' getComponent={balance} />
                                                                </Route>
                                                              </Router>
                                                            )
                                   React-Router-dom4.0以后：使用React.lazy也就是代码拆分
                                                            const record=lazy(()=>import('@/pages/record/record'));
                                                            const helpcenter=lazy(()=>import('@/pages/helpcenter/helpcenter'));
                                                            const production=lazy(()=>import('@/pages/production/production'));
                                                            const balance=lazy(()=>import('@/pages/balance/balance'));
                                                            export default class RouteConfig extends Component{
                                                              render(){
                                                                return (
                                                                  <Router>
                                                                    <Suspense fallback={<div>Loading....</div>}></Suspense>
                                                                    <Switch>
                                                                      <Route exact path='/' component={home}></Route>
                                                                      <Route path='/helpcenter' component={helpcenter}></Route>
                                                                    </Switch>
                                                                  </Router>
                                                                )
                                                              }
                                                            }
             默认路由（IndexRoute）和Index Links：通常一起使用<IndexLink to="/">Home</IndexLink>避免了Home一直处于激活状态
             React-Router生命周期：
                    routerWillLeave：拦截正在发生的跳转，在离开route前生效
                                        const Home=createClass({
                                          //父组件使用RouteContext，routehi被放到它的子组件和子孙组件的context中
                                          mixins:[RouteContext],
                                          render(){
                                            return (
                                              <NestedForm />
                                            )
                                          }
                                        })
                                        const NestedForm=createClass({
                                          //后代组件使用Lifecycle mixin获得
                                          mixins:[Lifecycle],
                                          routerWillLeave(nextLocation){
                                            if(){
                                              return 
                                            }
                                          }
                                        })
               服务端渲染：Serve((req,res)=>{
                                match({routes,location:req.url},(error,redirectLocation,renderProps)=>{
                                  if(error){
                                    //错误时发送一个500响应
                                    res.send(500,error.message)
                                  }else if(redirectLocation){
                                    // 重定向时发送一个30x响应
                                    res.redirect(302,redirectLocation.pathname+redirectLocation.search)
                                  }else if(renderProps){
                                    res.send(200,renderToString(<RoutingContext {...renderProps}></RoutingContext>))
                                  }else{
                                    res.send(404,'NotFound')
                                  }
                                })
                             
                             })
         
             
           
           
               
        
