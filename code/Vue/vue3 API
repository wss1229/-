1、应用配置：每个Vue都会暴露一个config对象
             1、errorHandler
                app.config.errorHandler=(err,vm,info)=>{
                处理错误
                ‘info’是vue特定的错误信息，比如错误所在的生命周期钩子
                }
              2、warnHanlder:只在开发环境下生效
              3、globalProperties:相当于vue2的Vue.proptotype
                  Vue.prototype.$http=()=>{}
                  const app=createApp({})
                  app.config.globalProperties.$http=()=>{}
               4、optionMergeStrategies:为自定义选项定义合并策略
               5、performance:设置为true后在浏览器面板中启动performance的性能追踪
               6、compilerOptions:用来配置运行时编译器的选项
                                  compilerOptions.isCuctomElement:识别Vue以外定义的自定义元素
                                  compilerOptions.whitespace:移除模板元素之间的空格产生更高效的编译效果
                                  compilerOptions.delimiters:用在模板内的文本插值边界符
 2、应用API:在vue3中改变全局Vue行为的API现在被移动到了由createAPP方法所创建的应用实例上
            1、component:component(name,definition),如果传入definition参数，返回应用实例；如果不传入definition参数，返回组件定义‘
                          用来注册或者检索全局组件
                          const app=createApp({});
                          app.component('my-component',{})//定义一个名为my-component的组件
                          const MyComponent=app.component('my-component')//检索注册的组件
             2、config:包含应用配置的对象
             3、directive:注册或者检索全局指令
                app.directive('my-directive',{
                  //指令是具有一组生命周期的钩子；
                  created(){},//在绑定元素的attribute或者事件监听器被应用之前调用
                  beforeMount(){},//绑定元素的父组件被挂在之前调用
                  mounted(){},//绑定元素的父组件被挂载时调用
                  beforeUpdate(){},//在包含组件的VNode更新之前调用
                  updated(){},//在包含组件的VNode及其子组件的Vnode更新之后调用
                  deforeUnmounted(){},//在绑定元素卸载之前调用
                  unmounted(){}//卸载绑定元素的父组件时调用
                })
              4、mixin:将一个minxin应用在整个应用范围内，应用于插件发布
              5、mount:所提供DOM元素的innerHTML将被替换为应用根组件的模板渲染结果
              6、provide:与inject是一对，使用时一起使用，分为应用provide和组件provide,这里说的是应用provide,用来
                         设置一个可以被注入到所有范围内所有组件中的值
                         const app=createApp({
                           inject:['user'],
                           template:`<div>{{user}}</div>`
                         });
                         app.provide('user','administrator');
               7、unmount:卸载应用实例的根组件
               8、use:安装Vue.js插件
                      const app=createApp({});
                      app.use(MyPlugin);
                      app.mount('#app');
               9、version:以字符串形式提供已安装的Vue的版本号
  3、全局API：现在Vue3的全局API是用import导入的
              1、createAPP:
              2、h:返回一个虚拟节点，一个普通对象，向Vue描述它在页面上渲染哪种节点的信息，接受三个参数：type,props,children
                    render(){return ('h',{},'Some Title')};
              3、defineComponent:
                  const Mycomponent=defineComponent({
                    data(){
                     return 
                    },
                    methods:{
                      increment(){

                      }
                    }
                  })
                  const HelloWorld=defineComponent(function HelooWorld(){
                    const count=ref(0);
                    return {count}
                  })
               4、defineAsyncComponent:只有在需要时才加载的异步组件
                  const AsyncComp=defineAsyncComponent(()=>
                    import('')
                  )
               5、defineCustomElement:返回一个原生的自定义元素
               6、resolveComponent:按名称解析component，但是只能在render和setup中使用
               7、resolveDynamicComponent:与<component :is="">一样，解析某个component，但是只能在setup和render中使用
               8、resolveDirective
               9、withDirectives
               10、createRender
               11、nextTick:更改了一些数据等待DOM更新后立即执行
               12、mergeProps:将包含VNode prop的对各对象合并为一个对象
               13、useCssModule:允许在setup的单文件组件函数中访问css模块
    4、选项式API：Data,DOM,生命周期钩子，资源组合，杂项
                expose:只向外暴露特定的内容，保证组件的封装性，我们现在用ref可以获取到组建的各种属性和内容，为了保证组件的封装性，
                        用expose决定哪些内容可以暴露出去
                生命周期钩子：注意在mounted周期内不能保证全部的的子组件也被挂在完成，如果希望等待整个视图渲染完毕可以在
                              此生命周期内使用$nectTick()
                              在Updated周期内同样不会保证所有的子组件被渲染完毕
                 
                directives:声明一组可用于组件实例中的指令
                
               
               
               
                    
                    
