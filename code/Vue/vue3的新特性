vue的响应性原理：
          1、vue通过creatEffect来跟踪正在运行的函数，让vue知道哪些代码在运行
          2、用proxy跟踪对象property的变化。关于proxy,是es6出现的一种元编程。
          3、用Reflect代替this绑定；
什么是proxy:
          proxy可以理解为在目标对象之前架设一层”拦截“，可以对外界的访问进行过滤和改写
          var proxy=new Proxy(target,handler);//target参数表示所要拦截的对象，handler也是一个对象
          用来定制拦截行为，值得注意的是target是原对象，而要使proxy起作用，必须针对Proxy实例操作；handler是一个空对象的话访问proxy就等同于访问target
            var proxy=new Proxy({},{
            get:function(target,propKey){
                    return 35;
                }
            });
            //Object(proto,[propertiesObject]);
            // 新创建的obj对象的原型对象是proxy
            let obj=Object.create(proxy);
            obj.time;
            console.log('obj.time',obj.time)--------35;
            proxy支持的拦截操作：get(target,propKey,receiver)
                                 set(target,propKey,value,receiver)
                                 has(target,propKey):拦截propKey in proxy的操作，return布尔值
                                 deleteProperty(target,propKey)：拦截delete proxy[propKey]的操作，return布尔值
                                 ownKeys(target):拦截object,getOwnPropertyNames(proxy),Object.getOwnPropertySymbols(proxy)
                                                 Object.keys(proxy),for...in,return目标对象所有自身的属性的属性名
                                 getOwnPropertyDescriptor(target,propKey):拦截Object.getOwnPropertyDescriptor(proxy,propKey)
                                                                          return属性的描述对象
                                 defineProperty(target,propKey,propDesc):拦截Object.defineProperty(proxy,propKey,propDesc)
                                                                          Object.defineProperties(proxy,proppDesc)return布尔值
                                 preventExtensions(target):拦截Object.preventExtensions(proxy),return布尔值
                                 getPrototypeOf(target):拦截Object.getPrototypeOf(proxy)，return布尔值
                                 isExtensible(target):拦截Object.isExtensible(proxy),return布尔值
                                 setPrototyprOf(target,proto):拦截Object.setPrototypeOf(proxy,proto),return布尔值
                                 apply(target,object,args):拦截Proxy实例作为函数调用的操作，proxy(...ags)
                                 construct(traget,object,args):拦截Proxy实例作为构造函数调用的操作，new proxy(...ags),return一个对象不然会报错
            
什么是Reflect?:
              ES6为了操作对象而提供的新API：
                                          1、将Object对象的一些明显属于内部的方法（Object.defineProperty）放到Reflect对象上
                                          2、修改某些Object方法的返回结果，让其变得更合理
                                                    try{
                                                          Object.defineProperty(obj,name,desc);
                                                      }catch(e){

                                                      }
                                                      //Refelct在无法定义属性时会抛出一个错误
                                                      if(Reflect.deleteProperty(target,property,attributes)){

                                                      }
                                           3、让Object操作都变成函数行为，比如name in obj和delete obj[name]，而Refelct.has(obj,name)和Refelct.deleteProperty(obj,name)
                                           4、Reflect对象的方法与Proxy对象的方法一一对应,Proxy有的方法Reflect都有
                                                  var loggedObj=new Proxy(obj,{
                                                          get(target,name){
                                                              console.log("get",target,name);
                                                              return Reflect.get(target,name);
                                                          },
                                                          deleteProperty(target,name){
                                                              console.log("delete",name);
                                                              return Reflect.deleteProperty(target,name);
                                                          },
                                                          has(target,name){
                                                              console.log("has",name);
                                                              return Reflect.has(target,name);
                                                          }
                                                      })
                                             5、使用Proxy实现观察者模式，观察者模式指的是函数自动观察数据对象，一旦对象有变化，函数就会自动执行
