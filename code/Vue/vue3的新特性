vue的响应性原理：
          1、vue通过creatEffect来跟踪正在运行的函数，让vue知道哪些代码在运行
          2、用proxy跟踪对象property的变化。关于proxy,是es6出现的一种元编程。
          3、用Reflect代替this绑定；
什么是proxy:
          proxy可以理解为在目标对象之前架设一层”拦截“，可以对外界的访问进行过滤和改写
          var proxy=new Proxy(target,handler);//target参数表示所要拦截的对象，handler也是一个对象
          用来定制拦截行为，值得注意的是target是原对象，而要使proxy起作用，必须针对Proxy实例操作；handler是一个空对象的话访问proxy就等同于访问target
            var proxy=new Proxy({},{
            get:function(target,propKey){
                    return 35;
                }
            });
            //Object(proto,[propertiesObject]);
            // 新创建的obj对象的原型对象是proxy
            let obj=Object.create(proxy);
            obj.time;
            console.log('obj.time',obj.time)--------35;
            proxy支持的拦截操作：get(target,propKey,receiver)
                                 set(target,propKey,value,receiver)
                                 has(target,propKey):拦截propKey in proxy的操作，return布尔值
                                 deleteProperty(target,propKey)：拦截delete proxy[propKey]的操作，return布尔值
                                 ownKeys(target):拦截object,getOwnPropertyNames(proxy),Object.getOwnPropertySymbols(proxy)
                                                 Object.keys(proxy),for...in,return目标对象所有自身的属性的属性名
                                 getOwnPropertyDescriptor(target,propKey):拦截Object.getOwnPropertyDescriptor(proxy,propKey)
                                                                          return属性的描述对象
                                 defineProperty(target,propKey,propDesc):拦截Object.defineProperty(proxy,propKey,propDesc)
                                                                          Object.defineProperties(proxy,proppDesc)return布尔值
                                 preventExtensions(target):拦截Object.preventExtensions(proxy),return布尔值
                                 getPrototypeOf(target):拦截Object.getPrototypeOf(proxy)，return布尔值
                                 isExtensible(target):拦截Object.isExtensible(proxy),return布尔值
                                 setPrototyprOf(target,proto):拦截Object.setPrototypeOf(proxy,proto),return布尔值
                                 apply(target,object,args):拦截Proxy实例作为函数调用的操作，proxy(...ags)
                                 construct(traget,object,args):拦截Proxy实例作为构造函数调用的操作，new proxy(...ags),return一个对象不然会报错
            
什么是Reflect?:
