/**
 * Module Name: request
 * Description:
 * Author: Administrator
 * Date: 2020-1-10 9:56
 * Last Modified: Administrator
 * Modify Time: 2020-1-10 9:56
 */
import axios from 'axios'
// import config from "../config";
import store from '../store';
import router from '../router';
import {showToast} from "./utils";

axios.defaults.baseURL = window.urlConfig.baseUrl;
axios.defaults.timeout = window.urlConfig.timeout;

axios.interceptors.request.use(config=>{
  const token = localStorage.getItem('token');
  if (!config.url.includes('Login')) {
    config.headers['authorization'] = token;
  }
  return config
},error => {
  return Promise.error(error)
})

axios.interceptors.response.use(response=>{
  if (response === null) {
    showToast('请求数据失败,请稍后重试!','red');
    return;
  }
  // console.log('response--------', response);
  // if (!response.status) {
  //   router.push({path: '/login'});
  // }
  if (response.status === 200){
    if (response.data.code === 204) {
      showToast('该账户未授权, 请联系管理员','red');
    } else if (response.data.code === 203) {
      showToast('没有操作权限,请重新登录刷新权限','red');
    } else if (response.data.code === 202) {
      showToast('登录过期,请重新登录','red');
      store.commit('REMOVE_LOGINUSER');
      router.push({path: '/login'});
    } else if (response.data.code === 208) {
      showToast('操作失败，请稍后重试','red');
    } else if (response.data.code === 500) {
      showToast('服务器异常，请稍后重试','red');
    } else if (response.data.code === 400) {
      showToast('业务异常，请稍后重试','red');
    }
    if (response.headers['authorization']) {
      store.commit('SET_TOKEN',response.headers['authorization']);
      store.commit('SET_TOKEN_EXPIRE', false);
      // eventBus.emit('onClose',false)
    }
    return Promise.resolve(response.data);
  }else {
    return Promise.resolve(response.data)
  }
},error => {
  console.log(error.code);
  console.error(error.message);

  showToast('请求数据失败, 请稍后重试!','red');
  if (error.response && error.response.status) {

    switch (error.response.status) {
      // 401: 未登录
      // 未登录则跳转登录页面，并携带当前页面的路径
      // 在登录成功后返回当前页面，这一步需要在登录页操作。
      case 401:
        /*router.replace({
          path: '/login',
          query: {
            redirect: router.currentRoute.fullPath
          }
        });*/
        break;

      // 403 token过期
      // 登录过期对用户进行提示
      // 清除本地token和清空vuex中token对象
      // 跳转登录页面
      case 403:
        /*Toast({
          message: '登录过期，请重新登录',
          duration: 1000,
          forbidClick: true
        });*/
        // 清除token
        // localStorage.removeItem('token');
        // store.commit('loginSuccess', null);
        // 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面
        /*setTimeout(() => {
          router.replace({
            path: '/login',
            query: {
              redirect: router.currentRoute.fullPath
            }
          });
        }, 1000);*/
        break;

      // 404请求不存在
      case 404:
       /* Toast({
          message: '网络请求不存在',
          duration: 1500,
          forbidClick: true
        });*/
        break;
      // 其他错误，直接抛出错误提示
      case 500:
        showToast('服务器异常,请稍后重试','red');
        break;
      case 400:
        showToast('业务异常,请稍后重试','red');
        break;
      default:
        /*Toast({
          message: error.response.data.message,
          duration: 1500,
          forbidClick: true
        });*/
    }

  }
  return Promise.reject(error.response);
})

/**
 * get请求
 * @param url {string} [请求的url地址]
 * @param params {object} [请求时携带的参数]
 * @returns {Promise<unknown>}
 */
export function get(url, params) {
  return new Promise((resolve, reject) => {
    axios.get(url, {
      params: params
    }).then(res => {
      resolve(res);
    }).catch(err => {
      reject(err)
    })
  })
}

/**
 * post请求
 * @param url {string}  [请求的url地址]
 * @param params {object} [请求时携带的参数]
 * @returns {Promise<unknown>}
 */
export function post(url,params) {
  return new Promise((resolve, reject) => {
    axios.post(url, params)
      .then(res => {
        resolve(res);
      })
      .catch(err =>{
        reject(err)
      })
  });
}
export default axios
