ES6新增对象方法，包含ES5方法：
                            属性的遍历：1、for...in(遍历可枚举属性)
                                        2、Object.keys(obj):返回一个数组，包含对象所有可枚举属性的key值
                                        3、Object.getOwnPropertyNames(obj):返回一个数组，包含所有属性的key值
                                        4、Object.getOwnPropertySymbols(obj):返回一个数组，包含对象自身的所有 Symbol 属性的键名
                                        5、Reflect.ownKeys(obj):返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。
                             super关键字：this指向函数所在对象，super指向当前对象的原型对象
                                           const proto = {
                                                  x: 'hello',
                                                  foo() {
                                                    console.log(this.x);
                                                  },
                                                };

                                                const obj = {
                                                  x: 'world',
                                                  foo() {
                                                    super.foo();
                                                  }
                                                }

                                                Object.setPrototypeOf(obj, proto);

                                                obj.foo() // "world"
                              对象的扩展运算符：{...}
                                                let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };
                                                x // 1
                                                y // 2
                                                z // { a: 3, b: 4 }
                                                let { ...z } = null; // 运行时错误
                                                解构赋值拷贝的是浅拷贝
                                                let obj = { a: { b: 1 } };
                                                let { ...x } = obj;
                                                obj.a.b = 2;
                                                x.a.b // 2
关于复杂数据类型的浅复制与深复制：
    js有五种基本数据类型，它们的赋值就是值传递；引用数据类型就是将对象的地址引用赋值。
    引用数据类型：对象、数组、函数等。
    堆和栈：
         要搞清楚浅复制和深复制就要先理解堆和栈。
         堆和栈都是内存中划分出来用来存储的区域，栈是自动分配的内存空间，由系统自动释放；而堆则是动态分配的内存，
         大小不定也不会自动释放。js的数据类型分为基本数据类型和复杂数据类型，基本数据类型存储在栈中，数据大小确定，内存空间大小可以分配，
         是直接按值存放。引用类型存放在堆内存中，变量实际上是一个存放在栈内的指针，这个指针指向堆内存中的地址。
     赋值：
          基本类型的赋值是在栈内存中开辟新的内存空间，所以两只值互相不影响
          引用类型的赋值是栈内存中地址的赋值，这样的话两个变量就指向了同一个存储地址，两者之间的操作也会互相影响。
     浅复制与深复制的区别：
           var a={}; var b=a;这种属于引用还不属于浅拷贝，真是离了个大谱！！！！
           正确姿势：首先深复制和浅复制只针对像Object,Array这样的复杂的对象。浅复制只复制一层对象的属性，而深复制则递归复制了所有层级。
对象迭代:
      Object.values()和Object.entries()
      
           
           
          
         
