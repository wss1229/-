1.1 类包含：构造函数方法、实例方法、获取函数、设置函数、静态类方法。类存在块作用域，且首字母要大写
1.1.2 类构造函数：
            constructor:在类定义块内创建类的构造函数，constructor会告诉解释器在使用new操作符创建新实例时，应该调用这个构造函数
            类构造函数的new,在调用类构造函数时不适用new会抛出错误；而在使用普通构造函数时不加new的话this就默认指向全局window
            class Person {
              constructor(){
                this.foo='foo';
              }
            }
            let p1=new Person();
            let p2=new p1.constructor();
            console.log(p1);//Person {foo: 'foo'}
            console.log(p2);//Person {foo: 'foo'}
1.1.3 在ECMAScript中，类就是一种特殊的函数，所以当用typeof检测时，会得到一个function类型

1.2实例、原型和类成员
         1.2.1 每个实例都对应一个唯一的成员对象，这意味着所有成员都不会在原型上共享
                     class Person {
                          constructor(){
                            this.name=new String('Jack');
                            this.sayName=()=>console.log(this.name);
                            this.nickname=['Jack','J-dog'];
                          }
                        }
                        let p1=new Person();
                        let p2=new Person();
                        p1.sayName();//Jack
                        p2.sayName();//Jack
                        console.log(p1.name===p2.name);//false
                        console.log(p1.nickname===p2.nickname);//false
           1.2.2原型方法与访问器：为了在实例间共享方法，在类块中定义的方法作为原型方法
                        class Person {
                          constructor(){
                            this.locate=()=>console.log('instance')
                          }
                          locate11(){
                            console.log('prototype');
                          }
                        }
                        let p=new Person();
                        console.log(p);
                        Person.prototype.locate11();//prototype
                 类支持获取和设置访问器，语法和普通对象一样
                        class Person {
                          set name(newName){
                            this.name_=newName;
                          }
                          get name(){
                            return this.name_;
                          }
                        }
                        let p=new Person();
                        p.name='Jake';
                        console.log(p.name);//Jake
           1.2.3 静态类方法：static关键字作为前缀，每个类上只能有一个，存在与类本身上
                        
          
            
