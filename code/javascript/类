1.1 类包含：构造函数方法、实例方法、获取函数、设置函数、静态类方法。类存在块作用域，且首字母要大写
1.1.2 类构造函数：
            constructor:在类定义块内创建类的构造函数，constructor会告诉解释器在使用new操作符创建新实例时，应该调用这个构造函数
            类构造函数的new,在调用类构造函数时不适用new会抛出错误；而在使用普通构造函数时不加new的话this就默认指向全局window
            class Person {
              constructor(){
                this.foo='foo';
              }
            }
            let p1=new Person();
            let p2=new p1.constructor();
            console.log(p1);//Person {foo: 'foo'}
            console.log(p2);//Person {foo: 'foo'}
1.1.3 在ECMAScript中，类就是一种特殊的函数，所以当用typeof检测时，会得到一个function类型

1.2实例、原型和类成员
         1.2.1 每个实例都对应一个唯一的成员对象，这意味着所有成员都不会在原型上共享
                     class Person {
                          constructor(){
                            this.name=new String('Jack');
                            this.sayName=()=>console.log(this.name);
                            this.nickname=['Jack','J-dog'];
                          }
                        }
                        let p1=new Person();
                        let p2=new Person();
                        p1.sayName();//Jack
                        p2.sayName();//Jack
                        console.log(p1.name===p2.name);//false
                        console.log(p1.nickname===p2.nickname);//false
           1.2.2原型方法与访问器：为了在实例间共享方法，在类块中定义的方法作为原型方法
                        class Person {
                          constructor(){
                            this.locate=()=>console.log('instance')
                          }
                          locate11(){
                            console.log('prototype');
                          }
                        }
                        let p=new Person();
                        console.log(p);
                        p.locate();//instance
                        Person.prototype.locate11();//prototype
                 类支持获取和设置访问器，语法和普通对象一样
                        class Person {
                          set name(newName){
                            this.name_=newName;
                          }
                          get name(){
                            return this.name_;
                          }
                        }
                        let p=new Person();
                        p.name='Jake';
                        console.log(p.name);//Jake
           1.2.3 静态类方法：static关键字作为前缀，每个类上只能有一个，存在与类本身上
                        class Person {
                          //添加到this上的内容会存在于不同的实例上
                          constructor(){
                            this.locate=()=>console.log('instance',this);
                          }
                          //定义在类的原型上
                          locate(){
                            console.log('prototype',this);
                          }
                          //定义在类本身上
                          static locate(){
                            console.log('class',this);
                          }
                        }
                        let p=new Person();
                        Person.prototype.locate();//prototype
                        Person.locate();//class
                        p.locate();//insatnce
             1.2.4 类定义不支持在原型或者类上添加成员数据，但是在类定义外部可以添加。一般来说，对象实列应该独自拥有通过this引用的数据
 1.3 继承
        1.3.1 ES6中的extends关键字，支持了类的继承机制，类继承虽然使用的是extends，但是背后依旧使用的原型链
            class Vehicle {
                          identifyPrototype(id){
                            console.log(id,this);
                          }
                          static identifyClass(id){
                            console.log(id,this);
                          }
            }
            class Bus extends Vehicle {}
            let v=new Vehicle();
            let b=new Bus();
            b.identifyPrototype('bus');//Bus {}
            v.identifyPrototype('Vehicle');//Vehicle {}
            Bus.identifyClass('bus');//class Bus {}
            Vehicle.identifyClass('Vehicle');//class Vehicle {}
        1.3.2 构造函数、HomeObject、super()
               super()使用中需要注意的问题：super()关键字只能在派生类中使用，而且只能在构造函数、静态方法、实例方法内部使用             
                        class Vehicle {
                          //static静态方法后面的内容写在Vehicle类上
                          static identify(){
                            console.log('Vehicle')
                          }
                        }
                        
                        class Bus extends Vehicle{
                          //static静态方法后面的内容写在Bus类上
                          static identify(){
                            //在派生类的静态方法中使用super调用继承类上的静态方法
                            super.identify();
                          }
                        }
                        Bus.identify();//Vehicle
                 在派生类的构造函数中调用super()后，super()会调用父类构造函数并将返回的实例赋值给this;如果需要给父类构造函数传参，就需要手动传入
                       class Vehicle {
                          //Vehicle类中的构造函数，用来为类添加成员属性
                          constructor(licensePlate){
                            this.licensePlate=licensePlate;
                          }
                        }
                        class Bus extends Vehicle{
                          constructor(a){
                            super(a)
                            //调用super时调用了父类构造函数，并将返回的实例赋值给this
                            console.log(this instanceof Vehicle);//true
                          }
                        }
                        console.log(new Bus('wss123'));//Bus {licensePlate: 'wss123'}
                  如果没有定义类构造函数，在派生类时会调用super(),而且会传入所有传给派生类的参数
                        class Vehicle {
                          //Vehicle类中的构造函数，用来为类添加成员属性
                          constructor(licensePlate){
                            this.licensePlate=licensePlate;
                          }
                        }
                        class Bus extends Vehicle{
                          constructor(a){
                            super(a)
                            //调用super时调用了父类构造函数，并将返回的实例赋值给this
                            console.log(this instanceof Vehicle);//true
                          }
                        }
                        console.log(new Bus('wss123'));//Bus {licensePlate: 'wss123'}
                    在类构造函数中，不能在调用super()之前引用this，因为调用了super()之后this才指向了父类构造函数实例。
                    在派生类中显式的定义了构造函数，那么必须要在构造函数中调用super()，或者在其中返回一个对象
        1.3.3 抽象基类
              供其它类继承，但本身不会被实例化。通过在实例化的时候检测new.target是不是抽象基类可以阻止对抽象基类的实例化
                       class Vehicle {
                          constructor(){
                            console.log(new.target);
                            //在抽象类中利用new.target来阻断Vehicle实例化
                            if(new.target===Vehicle){
                              throw new Error('Vehicle cannot be directly instantiated');
                            }
                          }
                        }
                        class Bus extends Vehicle {}
                        new Bus();
                        new Vehicle();//运行new Vehicle()是浏览器会报错Vehicle cannot be directly instantiated
                在抽象类的构造函数中进行检查，可以要求派生类必须定义某个方法，这里需要引用this，因为原型方法在调用构造函数之前就已经存在了。
                        class Vehicle {
                          constructor(){
                            if(new.target===Vehicle){
                              throw new Error('Vehicle cannot be directly instantiated');
                            }
                            if(!this.foo){
                              throw new Error('Inheriting class must define foo');
                            }
                            console.log('success')
                          }
                        }
                        class Bus extends Vehicle {
                          foo(){}
                        }
                        class Van extends Vehicle {

                        }
                        new Bus();//success
                        new Van();//因为Van派生类上没有定义foo函数,Inheriting class must define foo
          
            
